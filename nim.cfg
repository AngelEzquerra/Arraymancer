# Arraymancer compilation flag config

@if cudnn:
  define:cuda  ## TODO: using define here doesn't work
@end

@if cuda:
  cincludes:"/opt/cuda/include"
  cc:"gcc"
  # Compilation for Cuda requires C++
  gcc.cpp.exe:"/opt/cuda/bin/nvcc"
  gcc.cpp.linkerexe:"/opt/cuda/bin/nvcc"
  gcc.cpp.options.always:"-arch=sm_61 --x cu -Xcompiler -fpermissive" # Important sm_61 architecture corresponds to Pascal. Change for your own card
@end

@if openblas:
  define:"blas=openblas"    ## TODO: using define here doesn't work
  @if macosx:
    clibdir:"/usr/local/opt/openblas/lib"
    cincludes:"/usr/local/opt/openblas/include"
  @end
@end

# blis # Completely managed in the blis backend code

# native # -march=native flag is Handled in the code


@if mkl: # MKL multi_threaded
  define:openmp                   ## TODO: using define here doesn't work
  define:"blas=mkl_intel_lp64"    ## TODO: using define here doesn't work
  clibdir:"/opt/intel/mkl/lib/intel64"
  passl:"/opt/intel/mkl/lib/intel64/libmkl_intel_lp64.a"
  passl:"-lmkl_core"
  passl:"-lmkl_gnu_thread"
  passl:"-lgomp"
  dynlibOverride:"mkl_intel_lp64"
@end

@if openmp:
  stackTrace:off
  @if macosx: # Default compiler on Mac is clang without OpenMP and gcc is an alias to clang.
              # Use Homebrew GCC instead for OpenMP support. GCC (v7), must be properly linked via `brew link gcc`
    cc:"gcc"
    gcc.exe:"/usr/local/bin/gcc-7"
    gcc.linkerexe:"/usr/local/bin/gcc-7"
  @end
@end